//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from functional.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class functionalParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, WS=12, INT=13, ID=14, STR=15, UNTERMINATEDSTR=16, PLUS=17, 
		MINUS=18, TIMES=19, LPAREN=20, RPAREN=21, EQUALS=22, DBLCOLON=23, ARROW=24, 
		AND=25, OR=26, LBRACK=27, RBRACK=28, COMMA=29, JOIN=30, DOT=31, NL=32;
	public const int
		RULE_program = 0, RULE_definition = 1, RULE_predicate = 2, RULE_anontypename = 3, 
		RULE_simpleanontypename = 4, RULE_definitiontypename = 5, RULE_definitionsimpletypename = 6, 
		RULE_stmt = 7, RULE_whereclause = 8, RULE_patt = 9, RULE_bindpatt = 10, 
		RULE_expr = 11, RULE_mathexpr = 12, RULE_term = 13, RULE_call = 14, RULE_atom = 15;
	public static readonly string[] ruleNames = {
		"program", "definition", "predicate", "anontypename", "simpleanontypename", 
		"definitiontypename", "definitionsimpletypename", "stmt", "whereclause", 
		"patt", "bindpatt", "expr", "mathexpr", "term", "call", "atom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'module'", "'import'", "'include'", "'external'", "'type'", "'List'", 
		"'where'", "'_'", "'nil'", "'true'", "'false'", null, null, null, null, 
		null, "'+'", "'-'", "'*'", "'('", "')'", "'='", "'::'", "'->'", "'&'", 
		"'|'", "'['", "']'", "','", "':'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"WS", "INT", "ID", "STR", "UNTERMINATEDSTR", "PLUS", "MINUS", "TIMES", 
		"LPAREN", "RPAREN", "EQUALS", "DBLCOLON", "ARROW", "AND", "OR", "LBRACK", 
		"RBRACK", "COMMA", "JOIN", "DOT", "NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "functional.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static functionalParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public functionalParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public functionalParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(functionalParser.Eof, 0); }
		public ITerminalNode NL() { return GetToken(functionalParser.NL, 0); }
		public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 32; Match(NL);
				}
			}

			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << ID))) != 0)) {
				{
				{
				State = 35; definition();
				}
				}
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 41; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
	 
		public DefinitionContext() { }
		public virtual void CopyFrom(DefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ModuleDefinitionContext : DefinitionContext {
		public ITerminalNode[] ID() { return GetTokens(functionalParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(functionalParser.ID, i);
		}
		public ITerminalNode NL() { return GetToken(functionalParser.NL, 0); }
		public ITerminalNode[] DOT() { return GetTokens(functionalParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(functionalParser.DOT, i);
		}
		public ModuleDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionDefinitionContext : DefinitionContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode[] NL() { return GetTokens(functionalParser.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(functionalParser.NL, i);
		}
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public FunctionDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImportDefinitionContext : DefinitionContext {
		public ITerminalNode[] ID() { return GetTokens(functionalParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(functionalParser.ID, i);
		}
		public ITerminalNode NL() { return GetToken(functionalParser.NL, 0); }
		public ITerminalNode[] DOT() { return GetTokens(functionalParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(functionalParser.DOT, i);
		}
		public ImportDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncludeDefinitionContext : DefinitionContext {
		public ITerminalNode STR() { return GetToken(functionalParser.STR, 0); }
		public ITerminalNode NL() { return GetToken(functionalParser.NL, 0); }
		public IncludeDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExternalFunctionDefinitionContext : DefinitionContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode NL() { return GetToken(functionalParser.NL, 0); }
		public ExternalFunctionDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeDefinitionContext : DefinitionContext {
		public ITerminalNode ID() { return GetToken(functionalParser.ID, 0); }
		public ITerminalNode EQUALS() { return GetToken(functionalParser.EQUALS, 0); }
		public DefinitiontypenameContext definitiontypename() {
			return GetRuleContext<DefinitiontypenameContext>(0);
		}
		public ITerminalNode NL() { return GetToken(functionalParser.NL, 0); }
		public TypeDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_definition);
		int _la;
		try {
			int _alt;
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				_localctx = new ModuleDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 43; Match(T__0);
				State = 48;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 44; Match(ID);
						State = 45; Match(DOT);
						}
						} 
					}
					State = 50;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				}
				State = 51; Match(ID);
				State = 52; Match(NL);
				}
				break;
			case T__1:
				_localctx = new ImportDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 53; Match(T__1);
				State = 58;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 54; Match(ID);
						State = 55; Match(DOT);
						}
						} 
					}
					State = 60;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				State = 61; Match(ID);
				State = 62; Match(NL);
				}
				break;
			case T__2:
				_localctx = new IncludeDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 63; Match(T__2);
				State = 64; Match(STR);
				State = 65; Match(NL);
				}
				break;
			case T__3:
				_localctx = new ExternalFunctionDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 66; Match(T__3);
				State = 67; predicate();
				State = 68; Match(NL);
				}
				break;
			case ID:
				_localctx = new FunctionDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 70; predicate();
				State = 71; Match(NL);
				State = 77;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 72; stmt();
						State = 73; Match(NL);
						}
						} 
					}
					State = 79;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				}
				State = 80; stmt();
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NL) {
					{
					State = 81; Match(NL);
					}
				}

				}
				break;
			case T__4:
				_localctx = new TypeDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 84; Match(T__4);
				State = 85; Match(ID);
				State = 86; Match(EQUALS);
				State = 87; definitiontypename();
				State = 88; Match(NL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode DBLCOLON() { return GetToken(functionalParser.DBLCOLON, 0); }
		public AnontypenameContext anontypename() {
			return GetRuleContext<AnontypenameContext>(0);
		}
		public ITerminalNode[] ID() { return GetTokens(functionalParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(functionalParser.ID, i);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 4, RULE_predicate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 92; Match(ID);
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 97; Match(DBLCOLON);
			State = 98; anontypename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnontypenameContext : ParserRuleContext {
		public AnontypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anontypename; } }
	 
		public AnontypenameContext() { }
		public virtual void CopyFrom(AnontypenameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CompositeAnontypenameContext : AnontypenameContext {
		public SimpleanontypenameContext[] simpleanontypename() {
			return GetRuleContexts<SimpleanontypenameContext>();
		}
		public SimpleanontypenameContext simpleanontypename(int i) {
			return GetRuleContext<SimpleanontypenameContext>(i);
		}
		public ITerminalNode[] ARROW() { return GetTokens(functionalParser.ARROW); }
		public ITerminalNode ARROW(int i) {
			return GetToken(functionalParser.ARROW, i);
		}
		public CompositeAnontypenameContext(AnontypenameContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeAnontypename(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleanontypenameAnontypenameContext : AnontypenameContext {
		public SimpleanontypenameContext simpleanontypename() {
			return GetRuleContext<SimpleanontypenameContext>(0);
		}
		public SimpleanontypenameAnontypenameContext(AnontypenameContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleanontypenameAnontypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnontypenameContext anontypename() {
		AnontypenameContext _localctx = new AnontypenameContext(Context, State);
		EnterRule(_localctx, 6, RULE_anontypename);
		try {
			int _alt;
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new CompositeAnontypenameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 103;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 100; simpleanontypename();
						State = 101; Match(ARROW);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 105;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 107; simpleanontypename();
				}
				break;
			case 2:
				_localctx = new SimpleanontypenameAnontypenameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 109; simpleanontypename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleanontypenameContext : ParserRuleContext {
		public SimpleanontypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleanontypename; } }
	 
		public SimpleanontypenameContext() { }
		public virtual void CopyFrom(SimpleanontypenameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnontypenameSimpleanontypenameContext : SimpleanontypenameContext {
		public ITerminalNode LPAREN() { return GetToken(functionalParser.LPAREN, 0); }
		public AnontypenameContext anontypename() {
			return GetRuleContext<AnontypenameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(functionalParser.RPAREN, 0); }
		public AnontypenameSimpleanontypenameContext(SimpleanontypenameContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnontypenameSimpleanontypename(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamedSimpleanontypenameContext : SimpleanontypenameContext {
		public ITerminalNode ID() { return GetToken(functionalParser.ID, 0); }
		public NamedSimpleanontypenameContext(SimpleanontypenameContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedSimpleanontypename(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListSimpleanontypenameContext : SimpleanontypenameContext {
		public SimpleanontypenameContext simpleanontypename() {
			return GetRuleContext<SimpleanontypenameContext>(0);
		}
		public ListSimpleanontypenameContext(SimpleanontypenameContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListSimpleanontypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleanontypenameContext simpleanontypename() {
		SimpleanontypenameContext _localctx = new SimpleanontypenameContext(Context, State);
		EnterRule(_localctx, 8, RULE_simpleanontypename);
		try {
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				_localctx = new ListSimpleanontypenameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 112; Match(T__5);
				State = 113; simpleanontypename();
				}
				break;
			case ID:
				_localctx = new NamedSimpleanontypenameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 114; Match(ID);
				}
				break;
			case LPAREN:
				_localctx = new AnontypenameSimpleanontypenameContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 115; Match(LPAREN);
				State = 116; anontypename();
				State = 117; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitiontypenameContext : ParserRuleContext {
		public DefinitiontypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definitiontypename; } }
	 
		public DefinitiontypenameContext() { }
		public virtual void CopyFrom(DefinitiontypenameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AndtypeDefinitiontypenameContext : DefinitiontypenameContext {
		public ITerminalNode LPAREN() { return GetToken(functionalParser.LPAREN, 0); }
		public DefinitionsimpletypenameContext[] definitionsimpletypename() {
			return GetRuleContexts<DefinitionsimpletypenameContext>();
		}
		public DefinitionsimpletypenameContext definitionsimpletypename(int i) {
			return GetRuleContext<DefinitionsimpletypenameContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(functionalParser.RPAREN, 0); }
		public ITerminalNode[] AND() { return GetTokens(functionalParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(functionalParser.AND, i);
		}
		public AndtypeDefinitiontypenameContext(DefinitiontypenameContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndtypeDefinitiontypename(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrtypeDefinitiontypenameContext : DefinitiontypenameContext {
		public ITerminalNode LPAREN() { return GetToken(functionalParser.LPAREN, 0); }
		public ITerminalNode[] ID() { return GetTokens(functionalParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(functionalParser.ID, i);
		}
		public DefinitionsimpletypenameContext[] definitionsimpletypename() {
			return GetRuleContexts<DefinitionsimpletypenameContext>();
		}
		public DefinitionsimpletypenameContext definitionsimpletypename(int i) {
			return GetRuleContext<DefinitionsimpletypenameContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(functionalParser.RPAREN, 0); }
		public ITerminalNode[] OR() { return GetTokens(functionalParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(functionalParser.OR, i);
		}
		public OrtypeDefinitiontypenameContext(DefinitiontypenameContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrtypeDefinitiontypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitiontypenameContext definitiontypename() {
		DefinitiontypenameContext _localctx = new DefinitiontypenameContext(Context, State);
		EnterRule(_localctx, 10, RULE_definitiontypename);
		try {
			int _alt;
			State = 145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new AndtypeDefinitiontypenameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 121; Match(LPAREN);
				State = 125;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 122; definitionsimpletypename();
						State = 123; Match(AND);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 127;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 129; definitionsimpletypename();
				State = 130; Match(RPAREN);
				}
				break;
			case 2:
				_localctx = new OrtypeDefinitiontypenameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; Match(LPAREN);
				State = 137;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 133; Match(ID);
						State = 134; definitionsimpletypename();
						State = 135; Match(OR);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 139;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 141; Match(ID);
				State = 142; definitionsimpletypename();
				State = 143; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionsimpletypenameContext : ParserRuleContext {
		public DefinitionsimpletypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definitionsimpletypename; } }
	 
		public DefinitionsimpletypenameContext() { }
		public virtual void CopyFrom(DefinitionsimpletypenameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListDefinitionsimpletypenameContext : DefinitionsimpletypenameContext {
		public DefinitionsimpletypenameContext definitionsimpletypename() {
			return GetRuleContext<DefinitionsimpletypenameContext>(0);
		}
		public ListDefinitionsimpletypenameContext(DefinitionsimpletypenameContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListDefinitionsimpletypename(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamedDefinitionsimpletypenameContext : DefinitionsimpletypenameContext {
		public ITerminalNode ID() { return GetToken(functionalParser.ID, 0); }
		public NamedDefinitionsimpletypenameContext(DefinitionsimpletypenameContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedDefinitionsimpletypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionsimpletypenameContext definitionsimpletypename() {
		DefinitionsimpletypenameContext _localctx = new DefinitionsimpletypenameContext(Context, State);
		EnterRule(_localctx, 12, RULE_definitionsimpletypename);
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				_localctx = new ListDefinitionsimpletypenameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 147; Match(T__5);
				State = 148; definitionsimpletypename();
				}
				break;
			case ID:
				_localctx = new NamedDefinitionsimpletypenameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 149; Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncDefStmtContext : StmtContext {
		public ITerminalNode ID() { return GetToken(functionalParser.ID, 0); }
		public ITerminalNode EQUALS() { return GetToken(functionalParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhereclauseContext whereclause() {
			return GetRuleContext<WhereclauseContext>(0);
		}
		public PattContext[] patt() {
			return GetRuleContexts<PattContext>();
		}
		public PattContext patt(int i) {
			return GetRuleContext<PattContext>(i);
		}
		public ITerminalNode NL() { return GetToken(functionalParser.NL, 0); }
		public FuncDefStmtContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDefStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_stmt);
		int _la;
		try {
			_localctx = new FuncDefStmtContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(ID);
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << INT) | (1L << ID) | (1L << LPAREN) | (1L << LBRACK))) != 0)) {
				{
				{
				State = 153; patt();
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 159; Match(EQUALS);
			State = 160; expr();
			State = 162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 161; Match(NL);
				}
				break;
			}
			State = 164; whereclause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereclauseContext : ParserRuleContext {
		public WhereclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereclause; } }
	 
		public WhereclauseContext() { }
		public virtual void CopyFrom(WhereclauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NoWhereClauseContext : WhereclauseContext {
		public NoWhereClauseContext(WhereclauseContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhereClauseContext : WhereclauseContext {
		public BindpattContext[] bindpatt() {
			return GetRuleContexts<BindpattContext>();
		}
		public BindpattContext bindpatt(int i) {
			return GetRuleContext<BindpattContext>(i);
		}
		public ITerminalNode[] EQUALS() { return GetTokens(functionalParser.EQUALS); }
		public ITerminalNode EQUALS(int i) {
			return GetToken(functionalParser.EQUALS, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] NL() { return GetTokens(functionalParser.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(functionalParser.NL, i);
		}
		public WhereClauseContext(WhereclauseContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereclauseContext whereclause() {
		WhereclauseContext _localctx = new WhereclauseContext(Context, State);
		EnterRule(_localctx, 16, RULE_whereclause);
		try {
			int _alt;
			State = 177;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				_localctx = new WhereClauseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 166; Match(T__6);
				State = 172;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 167; bindpatt();
						State = 168; Match(EQUALS);
						State = 169; expr();
						State = 170; Match(NL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 174;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case Eof:
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case ID:
			case NL:
				_localctx = new NoWhereClauseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PattContext : ParserRuleContext {
		public PattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patt; } }
	 
		public PattContext() { }
		public virtual void CopyFrom(PattContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstIntPatternContext : PattContext {
		public ITerminalNode INT() { return GetToken(functionalParser.INT, 0); }
		public ConstIntPatternContext(PattContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstIntPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyListPatternContext : PattContext {
		public ITerminalNode LBRACK() { return GetToken(functionalParser.LBRACK, 0); }
		public ITerminalNode RBRACK() { return GetToken(functionalParser.RBRACK, 0); }
		public EmptyListPatternContext(PattContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyListPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndTypePatternContext : PattContext {
		public ITerminalNode LPAREN() { return GetToken(functionalParser.LPAREN, 0); }
		public PattContext[] patt() {
			return GetRuleContexts<PattContext>();
		}
		public PattContext patt(int i) {
			return GetRuleContext<PattContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(functionalParser.RPAREN, 0); }
		public ITerminalNode[] AND() { return GetTokens(functionalParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(functionalParser.AND, i);
		}
		public AndTypePatternContext(PattContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndTypePattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BindPatternContext : PattContext {
		public ITerminalNode ID() { return GetToken(functionalParser.ID, 0); }
		public BindPatternContext(PattContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrTypePatternContext : PattContext {
		public ITerminalNode LPAREN() { return GetToken(functionalParser.LPAREN, 0); }
		public ITerminalNode ID() { return GetToken(functionalParser.ID, 0); }
		public PattContext patt() {
			return GetRuleContext<PattContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(functionalParser.RPAREN, 0); }
		public OrTypePatternContext(PattContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrTypePattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DiscardPatternContext : PattContext {
		public DiscardPatternContext(PattContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiscardPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListPatternContext : PattContext {
		public ITerminalNode LPAREN() { return GetToken(functionalParser.LPAREN, 0); }
		public PattContext[] patt() {
			return GetRuleContexts<PattContext>();
		}
		public PattContext patt(int i) {
			return GetRuleContext<PattContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(functionalParser.RPAREN, 0); }
		public ITerminalNode[] JOIN() { return GetTokens(functionalParser.JOIN); }
		public ITerminalNode JOIN(int i) {
			return GetToken(functionalParser.JOIN, i);
		}
		public ListPatternContext(PattContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PattContext patt() {
		PattContext _localctx = new PattContext(Context, State);
		EnterRule(_localctx, 18, RULE_patt);
		try {
			int _alt;
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				_localctx = new BindPatternContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 179; Match(ID);
				}
				break;
			case 2:
				_localctx = new DiscardPatternContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 180; Match(T__7);
				}
				break;
			case 3:
				_localctx = new AndTypePatternContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 181; Match(LPAREN);
				State = 185;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 182; patt();
						State = 183; Match(AND);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 187;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 189; patt();
				State = 190; Match(RPAREN);
				}
				break;
			case 4:
				_localctx = new OrTypePatternContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 192; Match(LPAREN);
				State = 193; Match(ID);
				State = 194; patt();
				State = 195; Match(RPAREN);
				}
				break;
			case 5:
				_localctx = new EmptyListPatternContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 197; Match(LBRACK);
				State = 198; Match(RBRACK);
				}
				break;
			case 6:
				_localctx = new ListPatternContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 199; Match(LPAREN);
				State = 203;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 200; patt();
						State = 201; Match(JOIN);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 205;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 207; patt();
				State = 208; Match(RPAREN);
				}
				break;
			case 7:
				_localctx = new ConstIntPatternContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 210; Match(INT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindpattContext : ParserRuleContext {
		public BindpattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindpatt; } }
	 
		public BindpattContext() { }
		public virtual void CopyFrom(BindpattContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AndTypeBindPatternContext : BindpattContext {
		public ITerminalNode LPAREN() { return GetToken(functionalParser.LPAREN, 0); }
		public BindpattContext[] bindpatt() {
			return GetRuleContexts<BindpattContext>();
		}
		public BindpattContext bindpatt(int i) {
			return GetRuleContext<BindpattContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(functionalParser.RPAREN, 0); }
		public ITerminalNode[] AND() { return GetTokens(functionalParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(functionalParser.AND, i);
		}
		public AndTypeBindPatternContext(BindpattContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndTypeBindPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DiscardBindPatternContext : BindpattContext {
		public DiscardBindPatternContext(BindpattContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiscardBindPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrTypeBindPatternContext : BindpattContext {
		public ITerminalNode LPAREN() { return GetToken(functionalParser.LPAREN, 0); }
		public ITerminalNode ID() { return GetToken(functionalParser.ID, 0); }
		public BindpattContext bindpatt() {
			return GetRuleContext<BindpattContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(functionalParser.RPAREN, 0); }
		public OrTypeBindPatternContext(BindpattContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrTypeBindPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BindBindPatternContext : BindpattContext {
		public ITerminalNode ID() { return GetToken(functionalParser.ID, 0); }
		public BindBindPatternContext(BindpattContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindBindPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListBindPatternContext : BindpattContext {
		public ITerminalNode LPAREN() { return GetToken(functionalParser.LPAREN, 0); }
		public BindpattContext[] bindpatt() {
			return GetRuleContexts<BindpattContext>();
		}
		public BindpattContext bindpatt(int i) {
			return GetRuleContext<BindpattContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(functionalParser.RPAREN, 0); }
		public ITerminalNode[] JOIN() { return GetTokens(functionalParser.JOIN); }
		public ITerminalNode JOIN(int i) {
			return GetToken(functionalParser.JOIN, i);
		}
		public ListBindPatternContext(BindpattContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListBindPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindpattContext bindpatt() {
		BindpattContext _localctx = new BindpattContext(Context, State);
		EnterRule(_localctx, 20, RULE_bindpatt);
		try {
			int _alt;
			State = 242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				_localctx = new BindBindPatternContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 213; Match(ID);
				}
				break;
			case 2:
				_localctx = new DiscardBindPatternContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 214; Match(T__7);
				}
				break;
			case 3:
				_localctx = new AndTypeBindPatternContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 215; Match(LPAREN);
				State = 219;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 216; bindpatt();
						State = 217; Match(AND);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 221;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 223; bindpatt();
				State = 224; Match(RPAREN);
				}
				break;
			case 4:
				_localctx = new OrTypeBindPatternContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 226; Match(LPAREN);
				State = 227; Match(ID);
				State = 228; bindpatt();
				State = 229; Match(RPAREN);
				}
				break;
			case 5:
				_localctx = new ListBindPatternContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 231; Match(LPAREN);
				State = 235;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 232; bindpatt();
						State = 233; Match(JOIN);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 237;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 239; bindpatt();
				State = 240; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MathexprExprContext : ExprContext {
		public MathexprContext mathexpr() {
			return GetRuleContext<MathexprContext>(0);
		}
		public MathexprExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathexprExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JoinExprContext : ExprContext {
		public MathexprContext mathexpr() {
			return GetRuleContext<MathexprContext>(0);
		}
		public ITerminalNode JOIN() { return GetToken(functionalParser.JOIN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public JoinExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 22, RULE_expr);
		try {
			State = 249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				_localctx = new JoinExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 244; mathexpr(0);
				State = 245; Match(JOIN);
				State = 246; expr();
				}
				break;
			case 2:
				_localctx = new MathexprExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 248; mathexpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathexprContext : ParserRuleContext {
		public MathexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathexpr; } }
	 
		public MathexprContext() { }
		public virtual void CopyFrom(MathexprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MinusMathexprContext : MathexprContext {
		public MathexprContext mathexpr() {
			return GetRuleContext<MathexprContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(functionalParser.MINUS, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public MinusMathexprContext(MathexprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinusMathexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermMathexprContext : MathexprContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermMathexprContext(MathexprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermMathexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusMathexprContext : MathexprContext {
		public MathexprContext mathexpr() {
			return GetRuleContext<MathexprContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(functionalParser.PLUS, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public PlusMathexprContext(MathexprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusMathexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathexprContext mathexpr() {
		return mathexpr(0);
	}

	private MathexprContext mathexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MathexprContext _localctx = new MathexprContext(Context, _parentState);
		MathexprContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_mathexpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new TermMathexprContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 252; term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 262;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 260;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
					case 1:
						{
						_localctx = new PlusMathexprContext(new MathexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mathexpr);
						State = 254;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 255; Match(PLUS);
						State = 256; term(0);
						}
						break;
					case 2:
						{
						_localctx = new MinusMathexprContext(new MathexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mathexpr);
						State = 257;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 258; Match(MINUS);
						State = 259; term(0);
						}
						break;
					}
					} 
				}
				State = 264;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallTermContext : TermContext {
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public CallTermContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimesTermContext : TermContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode TIMES() { return GetToken(functionalParser.TIMES, 0); }
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public TimesTermContext(TermContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimesTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new CallTermContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 266; call();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 273;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TimesTermContext(new TermContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 268;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 269; Match(TIMES);
					State = 270; call();
					}
					} 
				}
				State = 275;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
	 
		public CallContext() { }
		public virtual void CopyFrom(CallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallCallContext : CallContext {
		public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public CallCallContext(CallContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomCallContext : CallContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public AtomCallContext(CallContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 28, RULE_call);
		try {
			int _alt;
			State = 283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				_localctx = new CallCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 276; atom();
				State = 278;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 277; atom();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 280;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				_localctx = new AtomCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 282; atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TrueAtomContext : AtomContext {
		public TrueAtomContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrueAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FalseAtomContext : AtomContext {
		public FalseAtomContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalseAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAtomContext : AtomContext {
		public ITerminalNode STR() { return GetToken(functionalParser.STR, 0); }
		public StringAtomContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NilAtomContext : AtomContext {
		public NilAtomContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNilAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListAtomContext : AtomContext {
		public ITerminalNode LBRACK() { return GetToken(functionalParser.LBRACK, 0); }
		public ITerminalNode RBRACK() { return GetToken(functionalParser.RBRACK, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(functionalParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(functionalParser.COMMA, i);
		}
		public ITerminalNode DBLCOLON() { return GetToken(functionalParser.DBLCOLON, 0); }
		public AnontypenameContext anontypename() {
			return GetRuleContext<AnontypenameContext>(0);
		}
		public ListAtomContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenAtomContext : AtomContext {
		public ITerminalNode LPAREN() { return GetToken(functionalParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(functionalParser.RPAREN, 0); }
		public ParenAtomContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarAtomContext : AtomContext {
		public ITerminalNode ID() { return GetToken(functionalParser.ID, 0); }
		public ITerminalNode DBLCOLON() { return GetToken(functionalParser.DBLCOLON, 0); }
		public AnontypenameContext anontypename() {
			return GetRuleContext<AnontypenameContext>(0);
		}
		public VarAtomContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntAtomContext : AtomContext {
		public ITerminalNode INT() { return GetToken(functionalParser.INT, 0); }
		public IntAtomContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfunctionalVisitor<TResult> typedVisitor = visitor as IfunctionalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 30, RULE_atom);
		int _la;
		try {
			int _alt;
			State = 316;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new IntAtomContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 285; Match(INT);
				}
				break;
			case ID:
				_localctx = new VarAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 286; Match(ID);
				State = 289;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 287; Match(DBLCOLON);
					State = 288; anontypename();
					}
					break;
				}
				}
				break;
			case STR:
				_localctx = new StringAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 291; Match(STR);
				}
				break;
			case T__8:
				_localctx = new NilAtomContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 292; Match(T__8);
				}
				break;
			case T__9:
				_localctx = new TrueAtomContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 293; Match(T__9);
				}
				break;
			case T__10:
				_localctx = new FalseAtomContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 294; Match(T__10);
				}
				break;
			case LPAREN:
				_localctx = new ParenAtomContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 295; Match(LPAREN);
				State = 296; expr();
				State = 297; Match(RPAREN);
				}
				break;
			case LBRACK:
				_localctx = new ListAtomContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 299; Match(LBRACK);
				State = 305;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 300; expr();
						State = 301; Match(COMMA);
						}
						} 
					}
					State = 307;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
				}
				State = 309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << INT) | (1L << ID) | (1L << STR) | (1L << LPAREN) | (1L << LBRACK))) != 0)) {
					{
					State = 308; expr();
					}
				}

				State = 311; Match(RBRACK);
				State = 314;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 312; Match(DBLCOLON);
					State = 313; anontypename();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return mathexpr_sempred((MathexprContext)_localctx, predIndex);
		case 13: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool mathexpr_sempred(MathexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\"', '\x141', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x5', '\x2', '$', '\n', '\x2', '\x3', 
		'\x2', '\a', '\x2', '\'', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '*', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', '\x31', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x34', 
		'\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', ';', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '>', 
		'\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'N', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'Q', '\v', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', 'U', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', ']', '\n', '\x3', '\x3', '\x4', '\x6', '\x4', '`', '\n', '\x4', 
		'\r', '\x4', '\xE', '\x4', '\x61', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', 'j', '\n', 
		'\x5', '\r', '\x5', '\xE', '\x5', 'k', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', 'q', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', 'z', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x6', '\a', '\x80', '\n', '\a', '\r', '\a', '\xE', '\a', '\x81', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x6', '\a', '\x8C', '\n', '\a', '\r', 
		'\a', '\xE', '\a', '\x8D', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x94', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\x99', '\n', '\b', '\x3', '\t', '\x3', '\t', '\a', 
		'\t', '\x9D', '\n', '\t', '\f', '\t', '\xE', '\t', '\xA0', '\v', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xA5', '\n', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x6', '\n', '\xAF', '\n', '\n', '\r', 
		'\n', '\xE', '\n', '\xB0', '\x3', '\n', '\x5', '\n', '\xB4', '\n', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x6', '\v', '\xBC', '\n', '\v', '\r', '\v', '\xE', '\v', '\xBD', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x6', '\v', '\xCE', '\n', '\v', 
		'\r', '\v', '\xE', '\v', '\xCF', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\xD6', '\n', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x6', '\f', '\xDE', 
		'\n', '\f', '\r', '\f', '\xE', '\f', '\xDF', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x6', '\f', 
		'\xEE', '\n', '\f', '\r', '\f', '\xE', '\f', '\xEF', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\xF5', '\n', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xFC', '\n', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x107', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x10A', '\v', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\a', '\xF', '\x112', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x115', 
		'\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x6', '\x10', '\x119', '\n', 
		'\x10', '\r', '\x10', '\xE', '\x10', '\x11A', '\x3', '\x10', '\x5', '\x10', 
		'\x11E', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x124', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\a', '\x11', '\x132', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x135', 
		'\v', '\x11', '\x3', '\x11', '\x5', '\x11', '\x138', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x13D', '\n', '\x11', 
		'\x5', '\x11', '\x13F', '\n', '\x11', '\x3', '\x11', '\x2', '\x4', '\x1A', 
		'\x1C', '\x12', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\x2', '\x2', 
		'\x2', '\x167', '\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x4', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '_', '\x3', '\x2', '\x2', '\x2', '\b', 'p', 
		'\x3', '\x2', '\x2', '\x2', '\n', 'y', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\xE', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x12', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\x18', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x11D', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x13E', '\x3', '\x2', '\x2', '\x2', '\"', '$', '\a', '\"', '\x2', '\x2', 
		'#', '\"', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', 
		'\x2', '$', '(', '\x3', '\x2', '\x2', '\x2', '%', '\'', '\x5', '\x4', 
		'\x3', '\x2', '&', '%', '\x3', '\x2', '\x2', '\x2', '\'', '*', '\x3', 
		'\x2', '\x2', '\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', 
		'\x2', '\x2', '\x2', ')', '+', '\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', 
		'\x2', '\x2', '\x2', '+', ',', '\a', '\x2', '\x2', '\x3', ',', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '-', '\x32', '\a', '\x3', '\x2', '\x2', '.', 
		'/', '\a', '\x10', '\x2', '\x2', '/', '\x31', '\a', '!', '\x2', '\x2', 
		'\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x31', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x32', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', '\x10', 
		'\x2', '\x2', '\x36', ']', '\a', '\"', '\x2', '\x2', '\x37', '<', '\a', 
		'\x4', '\x2', '\x2', '\x38', '\x39', '\a', '\x10', '\x2', '\x2', '\x39', 
		';', '\a', '!', '\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', 
		';', '>', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', 
		'<', '=', '\x3', '\x2', '\x2', '\x2', '=', '?', '\x3', '\x2', '\x2', '\x2', 
		'>', '<', '\x3', '\x2', '\x2', '\x2', '?', '@', '\a', '\x10', '\x2', '\x2', 
		'@', ']', '\a', '\"', '\x2', '\x2', '\x41', '\x42', '\a', '\x5', '\x2', 
		'\x2', '\x42', '\x43', '\a', '\x11', '\x2', '\x2', '\x43', ']', '\a', 
		'\"', '\x2', '\x2', '\x44', '\x45', '\a', '\x6', '\x2', '\x2', '\x45', 
		'\x46', '\x5', '\x6', '\x4', '\x2', '\x46', 'G', '\a', '\"', '\x2', '\x2', 
		'G', ']', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x5', '\x6', '\x4', '\x2', 
		'I', 'O', '\a', '\"', '\x2', '\x2', 'J', 'K', '\x5', '\x10', '\t', '\x2', 
		'K', 'L', '\a', '\"', '\x2', '\x2', 'L', 'N', '\x3', '\x2', '\x2', '\x2', 
		'M', 'J', '\x3', '\x2', '\x2', '\x2', 'N', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'O', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 
		'P', 'R', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 
		'R', 'T', '\x5', '\x10', '\t', '\x2', 'S', 'U', '\a', '\"', '\x2', '\x2', 
		'T', 'S', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 
		'U', ']', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '\a', '\x2', '\x2', 
		'W', 'X', '\a', '\x10', '\x2', '\x2', 'X', 'Y', '\a', '\x18', '\x2', '\x2', 
		'Y', 'Z', '\x5', '\f', '\a', '\x2', 'Z', '[', '\a', '\"', '\x2', '\x2', 
		'[', ']', '\x3', '\x2', '\x2', '\x2', '\\', '-', '\x3', '\x2', '\x2', 
		'\x2', '\\', '\x37', '\x3', '\x2', '\x2', '\x2', '\\', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\\', '\x44', '\x3', '\x2', '\x2', '\x2', '\\', 'H', 
		'\x3', '\x2', '\x2', '\x2', '\\', 'V', '\x3', '\x2', '\x2', '\x2', ']', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '^', '`', '\a', '\x10', '\x2', '\x2', 
		'_', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x64', '\a', '\x19', '\x2', '\x2', '\x64', '\x65', '\x5', '\b', '\x5', 
		'\x2', '\x65', '\a', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x5', '\n', 
		'\x6', '\x2', 'g', 'h', '\a', '\x1A', '\x2', '\x2', 'h', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'i', '\x66', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x5', 
		'\n', '\x6', '\x2', 'n', 'q', '\x3', '\x2', '\x2', '\x2', 'o', 'q', '\x5', 
		'\n', '\x6', '\x2', 'p', 'i', '\x3', '\x2', '\x2', '\x2', 'p', 'o', '\x3', 
		'\x2', '\x2', '\x2', 'q', '\t', '\x3', '\x2', '\x2', '\x2', 'r', 's', 
		'\a', '\b', '\x2', '\x2', 's', 'z', '\x5', '\n', '\x6', '\x2', 't', 'z', 
		'\a', '\x10', '\x2', '\x2', 'u', 'v', '\a', '\x16', '\x2', '\x2', 'v', 
		'w', '\x5', '\b', '\x5', '\x2', 'w', 'x', '\a', '\x17', '\x2', '\x2', 
		'x', 'z', '\x3', '\x2', '\x2', '\x2', 'y', 'r', '\x3', '\x2', '\x2', '\x2', 
		'y', 't', '\x3', '\x2', '\x2', '\x2', 'y', 'u', '\x3', '\x2', '\x2', '\x2', 
		'z', '\v', '\x3', '\x2', '\x2', '\x2', '{', '\x7F', '\a', '\x16', '\x2', 
		'\x2', '|', '}', '\x5', '\xE', '\b', '\x2', '}', '~', '\a', '\x1B', '\x2', 
		'\x2', '~', '\x80', '\x3', '\x2', '\x2', '\x2', '\x7F', '|', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x5', '\xE', 
		'\b', '\x2', '\x84', '\x85', '\a', '\x17', '\x2', '\x2', '\x85', '\x94', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x8B', '\a', '\x16', '\x2', '\x2', 
		'\x87', '\x88', '\a', '\x10', '\x2', '\x2', '\x88', '\x89', '\x5', '\xE', 
		'\b', '\x2', '\x89', '\x8A', '\a', '\x1C', '\x2', '\x2', '\x8A', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\x8B', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\a', '\x10', '\x2', '\x2', 
		'\x90', '\x91', '\x5', '\xE', '\b', '\x2', '\x91', '\x92', '\a', '\x17', 
		'\x2', '\x2', '\x92', '\x94', '\x3', '\x2', '\x2', '\x2', '\x93', '{', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\r', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\a', '\b', 
		'\x2', '\x2', '\x96', '\x99', '\x5', '\xE', '\b', '\x2', '\x97', '\x99', 
		'\a', '\x10', '\x2', '\x2', '\x98', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x97', '\x3', '\x2', '\x2', '\x2', '\x99', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x9E', '\a', '\x10', '\x2', '\x2', '\x9B', '\x9D', 
		'\x5', '\x14', '\v', '\x2', '\x9C', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\xA2', '\a', '\x18', '\x2', '\x2', '\xA2', '\xA4', '\x5', '\x18', 
		'\r', '\x2', '\xA3', '\xA5', '\a', '\"', '\x2', '\x2', '\xA4', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x5', '\x12', 
		'\n', '\x2', '\xA7', '\x11', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xAE', 
		'\a', '\t', '\x2', '\x2', '\xA9', '\xAA', '\x5', '\x16', '\f', '\x2', 
		'\xAA', '\xAB', '\a', '\x18', '\x2', '\x2', '\xAB', '\xAC', '\x5', '\x18', 
		'\r', '\x2', '\xAC', '\xAD', '\a', '\"', '\x2', '\x2', '\xAD', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xB4', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\x13', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xD6', 
		'\a', '\x10', '\x2', '\x2', '\xB6', '\xD6', '\a', '\n', '\x2', '\x2', 
		'\xB7', '\xBB', '\a', '\x16', '\x2', '\x2', '\xB8', '\xB9', '\x5', '\x14', 
		'\v', '\x2', '\xB9', '\xBA', '\a', '\x1B', '\x2', '\x2', '\xBA', '\xBC', 
		'\x3', '\x2', '\x2', '\x2', '\xBB', '\xB8', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBB', '\x3', '\x2', 
		'\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\x5', '\x14', '\v', '\x2', 
		'\xC0', '\xC1', '\a', '\x17', '\x2', '\x2', '\xC1', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\xC3', '\a', '\x16', '\x2', '\x2', '\xC3', '\xC4', 
		'\a', '\x10', '\x2', '\x2', '\xC4', '\xC5', '\x5', '\x14', '\v', '\x2', 
		'\xC5', '\xC6', '\a', '\x17', '\x2', '\x2', '\xC6', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xC8', '\a', '\x1D', '\x2', '\x2', '\xC8', '\xD6', 
		'\a', '\x1E', '\x2', '\x2', '\xC9', '\xCD', '\a', '\x16', '\x2', '\x2', 
		'\xCA', '\xCB', '\x5', '\x14', '\v', '\x2', '\xCB', '\xCC', '\a', ' ', 
		'\x2', '\x2', '\xCC', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\x3', '\x2', 
		'\x2', '\x2', '\xD0', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', 
		'\x5', '\x14', '\v', '\x2', '\xD2', '\xD3', '\a', '\x17', '\x2', '\x2', 
		'\xD3', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD6', '\a', '\xF', 
		'\x2', '\x2', '\xD5', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xB6', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\xD5', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\xD7', '\xF5', '\a', '\x10', '\x2', '\x2', '\xD8', '\xF5', '\a', '\n', 
		'\x2', '\x2', '\xD9', '\xDD', '\a', '\x16', '\x2', '\x2', '\xDA', '\xDB', 
		'\x5', '\x16', '\f', '\x2', '\xDB', '\xDC', '\a', '\x1B', '\x2', '\x2', 
		'\xDC', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDA', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x5', '\x16', 
		'\f', '\x2', '\xE2', '\xE3', '\a', '\x17', '\x2', '\x2', '\xE3', '\xF5', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\a', '\x16', '\x2', '\x2', 
		'\xE5', '\xE6', '\a', '\x10', '\x2', '\x2', '\xE6', '\xE7', '\x5', '\x16', 
		'\f', '\x2', '\xE7', '\xE8', '\a', '\x17', '\x2', '\x2', '\xE8', '\xF5', 
		'\x3', '\x2', '\x2', '\x2', '\xE9', '\xED', '\a', '\x16', '\x2', '\x2', 
		'\xEA', '\xEB', '\x5', '\x16', '\f', '\x2', '\xEB', '\xEC', '\a', ' ', 
		'\x2', '\x2', '\xEC', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEA', 
		'\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', '\x2', '\x2', '\x2', 
		'\xEF', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', 
		'\x5', '\x16', '\f', '\x2', '\xF2', '\xF3', '\a', '\x17', '\x2', '\x2', 
		'\xF3', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xD7', '\x3', '\x2', 
		'\x2', '\x2', '\xF4', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\xE4', '\x3', '\x2', '\x2', '\x2', 
		'\xF4', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xF5', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\xF6', '\xF7', '\x5', '\x1A', '\xE', '\x2', '\xF7', '\xF8', 
		'\a', ' ', '\x2', '\x2', '\xF8', '\xF9', '\x5', '\x18', '\r', '\x2', '\xF9', 
		'\xFC', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFC', '\x5', '\x1A', '\xE', 
		'\x2', '\xFB', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\x19', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFE', '\b', '\xE', '\x1', '\x2', '\xFE', '\xFF', '\x5', '\x1C', '\xF', 
		'\x2', '\xFF', '\x108', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', 
		'\f', '\x5', '\x2', '\x2', '\x101', '\x102', '\a', '\x13', '\x2', '\x2', 
		'\x102', '\x107', '\x5', '\x1C', '\xF', '\x2', '\x103', '\x104', '\f', 
		'\x4', '\x2', '\x2', '\x104', '\x105', '\a', '\x14', '\x2', '\x2', '\x105', 
		'\x107', '\x5', '\x1C', '\xF', '\x2', '\x106', '\x100', '\x3', '\x2', 
		'\x2', '\x2', '\x106', '\x103', '\x3', '\x2', '\x2', '\x2', '\x107', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'\x108', '\x109', '\x3', '\x2', '\x2', '\x2', '\x109', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x10A', '\x108', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x10C', '\b', '\xF', '\x1', '\x2', '\x10C', '\x10D', '\x5', '\x1E', '\x10', 
		'\x2', '\x10D', '\x113', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', 
		'\f', '\x4', '\x2', '\x2', '\x10F', '\x110', '\a', '\x15', '\x2', '\x2', 
		'\x110', '\x112', '\x5', '\x1E', '\x10', '\x2', '\x111', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x112', '\x115', '\x3', '\x2', '\x2', '\x2', '\x113', 
		'\x111', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x115', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x116', '\x118', '\x5', ' ', '\x11', '\x2', 
		'\x117', '\x119', '\x5', ' ', '\x11', '\x2', '\x118', '\x117', '\x3', 
		'\x2', '\x2', '\x2', '\x119', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x118', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', 
		'\x2', '\x11B', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11E', 
		'\x5', ' ', '\x11', '\x2', '\x11D', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x13F', '\a', '\xF', '\x2', '\x2', '\x120', 
		'\x123', '\a', '\x10', '\x2', '\x2', '\x121', '\x122', '\a', '\x19', '\x2', 
		'\x2', '\x122', '\x124', '\x5', '\b', '\x5', '\x2', '\x123', '\x121', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x125', '\x13F', '\a', 
		'\x11', '\x2', '\x2', '\x126', '\x13F', '\a', '\v', '\x2', '\x2', '\x127', 
		'\x13F', '\a', '\f', '\x2', '\x2', '\x128', '\x13F', '\a', '\r', '\x2', 
		'\x2', '\x129', '\x12A', '\a', '\x16', '\x2', '\x2', '\x12A', '\x12B', 
		'\x5', '\x18', '\r', '\x2', '\x12B', '\x12C', '\a', '\x17', '\x2', '\x2', 
		'\x12C', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x133', '\a', 
		'\x1D', '\x2', '\x2', '\x12E', '\x12F', '\x5', '\x18', '\r', '\x2', '\x12F', 
		'\x130', '\a', '\x1F', '\x2', '\x2', '\x130', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x131', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x132', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x133', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\x133', '\x134', '\x3', '\x2', '\x2', '\x2', '\x134', '\x137', '\x3', 
		'\x2', '\x2', '\x2', '\x135', '\x133', '\x3', '\x2', '\x2', '\x2', '\x136', 
		'\x138', '\x5', '\x18', '\r', '\x2', '\x137', '\x136', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x138', '\x3', '\x2', '\x2', '\x2', '\x138', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x139', '\x13C', '\a', '\x1E', '\x2', '\x2', 
		'\x13A', '\x13B', '\a', '\x19', '\x2', '\x2', '\x13B', '\x13D', '\x5', 
		'\b', '\x5', '\x2', '\x13C', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13C', 
		'\x13D', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13F', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x120', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x125', '\x3', '\x2', '\x2', '\x2', 
		'\x13E', '\x126', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x13E', '\x128', '\x3', '\x2', '\x2', '\x2', '\x13E', 
		'\x129', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x12D', '\x3', '\x2', '\x2', 
		'\x2', '\x13F', '!', '\x3', '\x2', '\x2', '\x2', '&', '#', '(', '\x32', 
		'<', 'O', 'T', '\\', '\x61', 'k', 'p', 'y', '\x81', '\x8D', '\x93', '\x98', 
		'\x9E', '\xA4', '\xB0', '\xB3', '\xBD', '\xCF', '\xD5', '\xDF', '\xEF', 
		'\xF4', '\xFB', '\x106', '\x108', '\x113', '\x11A', '\x11D', '\x123', 
		'\x133', '\x137', '\x13C', '\x13E',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
